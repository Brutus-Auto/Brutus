// proto/brutus.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: proto/brutus.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MQTTReceiver_DataExchange_FullMethodName = "/brutus.MQTTReceiver/DataExchange"
	MQTTReceiver_GetHistory_FullMethodName   = "/brutus.MQTTReceiver/GetHistory"
)

// MQTTReceiverClient is the client API for MQTTReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MQTTReceiverClient interface {
	// Bi-directional stream: clients send Command, receive Value streams.
	DataExchange(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Command, Value], error)
	// Получение истории значений параметра
	GetHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
}

type mQTTReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewMQTTReceiverClient(cc grpc.ClientConnInterface) MQTTReceiverClient {
	return &mQTTReceiverClient{cc}
}

func (c *mQTTReceiverClient) DataExchange(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Command, Value], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MQTTReceiver_ServiceDesc.Streams[0], MQTTReceiver_DataExchange_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Command, Value]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MQTTReceiver_DataExchangeClient = grpc.BidiStreamingClient[Command, Value]

func (c *mQTTReceiverClient) GetHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, MQTTReceiver_GetHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MQTTReceiverServer is the server API for MQTTReceiver service.
// All implementations must embed UnimplementedMQTTReceiverServer
// for forward compatibility.
type MQTTReceiverServer interface {
	// Bi-directional stream: clients send Command, receive Value streams.
	DataExchange(grpc.BidiStreamingServer[Command, Value]) error
	// Получение истории значений параметра
	GetHistory(context.Context, *HistoryRequest) (*HistoryResponse, error)
	mustEmbedUnimplementedMQTTReceiverServer()
}

// UnimplementedMQTTReceiverServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMQTTReceiverServer struct{}

func (UnimplementedMQTTReceiverServer) DataExchange(grpc.BidiStreamingServer[Command, Value]) error {
	return status.Errorf(codes.Unimplemented, "method DataExchange not implemented")
}
func (UnimplementedMQTTReceiverServer) GetHistory(context.Context, *HistoryRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedMQTTReceiverServer) mustEmbedUnimplementedMQTTReceiverServer() {}
func (UnimplementedMQTTReceiverServer) testEmbeddedByValue()                      {}

// UnsafeMQTTReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MQTTReceiverServer will
// result in compilation errors.
type UnsafeMQTTReceiverServer interface {
	mustEmbedUnimplementedMQTTReceiverServer()
}

func RegisterMQTTReceiverServer(s grpc.ServiceRegistrar, srv MQTTReceiverServer) {
	// If the following call pancis, it indicates UnimplementedMQTTReceiverServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MQTTReceiver_ServiceDesc, srv)
}

func _MQTTReceiver_DataExchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MQTTReceiverServer).DataExchange(&grpc.GenericServerStream[Command, Value]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MQTTReceiver_DataExchangeServer = grpc.BidiStreamingServer[Command, Value]

func _MQTTReceiver_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTReceiverServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MQTTReceiver_GetHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTReceiverServer).GetHistory(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MQTTReceiver_ServiceDesc is the grpc.ServiceDesc for MQTTReceiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MQTTReceiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brutus.MQTTReceiver",
	HandlerType: (*MQTTReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHistory",
			Handler:    _MQTTReceiver_GetHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DataExchange",
			Handler:       _MQTTReceiver_DataExchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/brutus.proto",
}
